{"version":3,"sources":["Components/Header.js","Components/About.js","Components/Portfolio.js","App.js","registerServiceWorker.js","index.js"],"names":["Header","data","name","description","networks","social","map","network","href","url","className","id","title","About","profilepic","image","bio","city","address","state","zip","email","resumeDownload","resumedownload","src","alt","Portfolio","projects","projectImage","category","App","resumeData","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.7a7115c2.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default function Header({data}) {\r\n\r\n   if(data){\r\n   var name = data.name;\r\n   var description= data.description;\r\n   var networks= data.social.map(function(network){\r\n      return <li key={network.name}><a href={network.url}><i className={network.className}></i></a></li>\r\n   })\r\n   }\r\n\r\n   return (\r\n   <header id=\"home\">\r\n\r\n   <nav id=\"nav-wrap\">\r\n\r\n      <a className=\"mobile-btn\" href=\"#nav-wrap\" title=\"Show navigation\">Show navigation</a>\r\n      <a className=\"mobile-btn\" href=\"#home\" title=\"Hide navigation\">Hide navigation</a>\r\n\r\n      <ul id=\"nav\" className=\"nav\">\r\n         <li className=\"current\"><a className=\"smoothscroll\" href=\"#home\">Home</a></li>\r\n         <li><a className=\"smoothscroll\" href=\"#about\">About</a></li>\r\n         <li><a className=\"smoothscroll\" href=\"#portfolio\">Works</a></li>\r\n      </ul>\r\n\r\n   </nav>\r\n\r\n   <div className=\"row banner\">\r\n      <div className=\"banner-text\">\r\n         <h1 className=\"responsive-headline\">I'm {name}.</h1>\r\n         <h3>{description}</h3>\r\n         <hr />\r\n         <ul className=\"social\">\r\n            {networks}\r\n         </ul>\r\n      </div>\r\n   </div>\r\n\r\n   <p className=\"scrolldown\">\r\n      <a className=\"smoothscroll\" href=\"#about\"><i className=\"icon-down-circle\"></i></a>\r\n   </p>\r\n\r\n</header>\r\n   );\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default function About({data}){\r\n\r\n   if(data){\r\n   var name = data.name;\r\n   var profilepic= \"images/\"+data.image;\r\n   var bio = data.bio;\r\n   var city = data.address.city;\r\n   var state = data.address.state;\r\n   var zip = data.address.zip;\r\n   var email = data.email;\r\n   var resumeDownload = data.resumedownload;\r\n   }\r\n\r\n   return (\r\n   <section id=\"about\">\r\n   <div className=\"row\">\r\n      <div className=\"three columns\">\r\n         <img className=\"profile-pic\"  src={profilepic} alt={`${name} Profile Pic`}/>\r\n      </div>\r\n      <div className=\"nine columns main-col\">\r\n         <h2>About Me</h2>\r\n\r\n         <p>{bio}</p>\r\n         <div className=\"row\">\r\n            <div className=\"columns contact-details\">\r\n               <h2>Contact Details</h2>\r\n               <p className=\"address\">\r\n                  <span>{name}</span><br />\r\n                  <span>{city}, {state} {zip}</span><br />\r\n                  <span>{email}</span>\r\n               </p>\r\n            </div>\r\n            <div className=\"columns download\">\r\n               <p>\r\n                  <a href={resumeDownload} className=\"button\"><i className=\"fa fa-download\"></i>Download Resume</a>\r\n               </p>\r\n            </div>\r\n         </div>\r\n      </div>\r\n   </div>\r\n\r\n</section>\r\n   );\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default function Portfolio({data}) {\r\n  if(data){\r\n    var projects = data.projects.map(function(projects){\r\n      var projectImage = 'images/portfolio/'+projects.image;\r\n      return <div key={projects.title} className=\"columns portfolio-item\">\r\n          <div className=\"item-wrap\">\r\n          <a href={projects.url} title={projects.title}>\r\n              <img alt={projects.title} src={projectImage} />\r\n              <div className=\"overlay\">\r\n                <div className=\"portfolio-item-meta\">\r\n                <h5>{projects.title}</h5>\r\n                    <p>{projects.category}</p>\r\n                </div>\r\n              </div>\r\n            <div className=\"link-icon\"><i className=\"fa fa-link\"></i></div>\r\n          </a>\r\n        </div>\r\n      </div>\r\n    })\r\n  }\r\n\r\n  return (\r\n    <section id=\"portfolio\">\r\n\r\n    <div className=\"row\">\r\n\r\n        <div className=\"twelve columns collapsed\">\r\n\r\n          <h1>Check Out Some of My Works.</h1>\r\n\r\n          <div id=\"portfolio-wrapper\" className=\"bgrid-quarters s-bgrid-thirds cf\">\r\n              {projects}\r\n          </div>\r\n        </div>\r\n    </div>\r\n  </section>\r\n  );\r\n}\r\n","import React, { Component, useState, useEffect } from 'react';\r\nimport ReactGA from 'react-ga';\r\nimport $ from 'jquery';\r\nimport './App.css';\r\nimport Header from './Components/Header';\r\nimport About from './Components/About';\r\nimport Portfolio from './Components/Portfolio';\r\nimport * as resumeData from './resumeData.json';\r\n\r\nexport default function App() {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header data={resumeData.main}/>\r\n      <About data={resumeData.main}/>\r\n      <Portfolio data={resumeData.portfolio}/>\r\n    </div>\r\n  );\r\n}\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}